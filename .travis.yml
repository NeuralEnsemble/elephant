dist: xenial
language: python
sudo: false

addons:
   apt:
     update: true


matrix:
  include:
    - name: "conda 2.7"
      python: 2.7
      env: DISTRIB="conda"

    - name: "pip 2.7"
      python: 2.7
      env: DISTRIB="pip"

    - name: "pip 3.5"
      python: 3.5
      env: DISTRIB="pip"

    - name: "pip 3.6 requirements-extras"
      python: 3.6
      env: DISTRIB="pip"
      before_install: sudo apt install -y libopenmpi-dev openmpi-bin
      before_script: pip install -r requirements-extras.txt
      script: mpiexec -n 1 nosetests --with-coverage --cover-package=elephant
      after_success: coveralls || echo "coveralls failed"

    - name: "conda 3.7"
      python: 3.7
      env: DISTRIB="conda"

    - name: "conda 3.8"
      python: 3.8
      env: DISTRIB="conda"

    - name: "pip 3.8"
      python: 3.8
      env: DISTRIB="pip"

  exclude:
    - name: "pip 3.6 requirements-extras min version"
      # excluded due to unrelated unittest assertWarn bug error
      python: 3.6
      env: DISTRIB="pip"
      before_install:
        - sudo apt install -y libopenmpi-dev openmpi-bin
        - sudo apt install -y libblas-dev liblapack-dev libatlas-base-dev gfortran
        - sed -i 's/>=/==/g' requirements*.txt
      before_script: pip install -r requirements-extras.txt


install:
  - if [[ "${DISTRIB}" == "conda" ]];
    then
      export MINICONDA_PATH=${HOME}/miniconda;
      export PATH=${MINICONDA_PATH}/bin:${PATH};
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p ${MINICONDA_PATH};
      conda config --set always_yes yes;
      conda update conda;
      conda create --name elephant_env python=${TRAVIS_PYTHON_VERSION};
      source activate elephant_env;
      conda install mkl;
      conda config --append channels conda-forge;
      sed '/^neo/d' requirements.txt > requirements-conda.txt;
      conda install --file requirements-conda.txt;
      echo "'neo' will be installed by pip from requirements.txt later on";
      pip list;
    else
      pip install -r requirements.txt;
    fi

  - pip -V
  - pip install coverage coveralls nose
  - python setup.py install
  - python -c "from elephant.spade import HAVE_FIM; assert HAVE_FIM"
  - pip list
  - python --version

script:
  nosetests --with-coverage --cover-package=elephant
